1. static members
2. Object class and it's methods:
	Equals (virtual)
	GetHashCode (virtual)
	ToString (virtual)
	GetType
3. namespace
4. method argument related keywords (ref, out)
5. enum
6. struct
7. sealed

static:
a. without creating any instance lets'assign the value to static data member(s)
	 - use static property or method to assign value before any object is created

b. or, when the first instance is created, then the static member(s) is/are assigned value. 
	- write a constructor in the class which will be responsible to assign value to ONLY static member(s) and also that constructor needs to be executed ONLY ONCE, during the first instance/object creation, will NOT be invoked next time onwards when you create further instances

		-- Static constructor
			- you do not use any access specifier with it, NOT even public			
			- this ctor is not invoked explicitly while creating instance 
			- this ctor can't be overloaded
			- will be responsible to assign value to ONLY static member(s)
			- executed ONLY ONCE, during the first instance/object creation or even before any instance creation provided you have used the class (may be you have called a static property or a static method), will NOT be invoked next time onwards when you create further instances

c. field (data member) initialization

Now after this no matter you create thousands of objects, the static member(s) will NOT be assigned value anymore.

You need one time value assignment to static member(s)



static --> data member, constructor, proprty, method
who can assign value to static and const (which is by default static) and non-static members within the class?

kewyword field-initialization	static-ctor instance-ctor static-prop instance-prop static-method instance-method
-----------------------------------------------------------------------------------------------------------------------
static		yes		yes		yes		yes	yes		yes		yes
static readonly yes		yes		no		no	no		no		no
const		yes		no		no		no	no		no		no
(instance)	yes		no		yes		no	yes		no		yes
(instance readonly)yes		no		yes		no	no		no		no


Object class:
----------------------------------------------------------------------
class A //:Object
{}

class B: A
{
}

Conversion between any type and object type:
1. RT --> RT
upcasting:
object obj = new A();
downcasting:
A objA = (A)obj;

A objB = new B();
object objB1 = objB;


interface IA //:Object

1. RT --> VT
VT --> RT (Boxing)
int a = 12;
object obInt = a;

RT-->VT (Unboxing)
int b = (int)obInt;

Object class members: (instance)
----------------------------------------------------------------------
virtual int GetHashCode()
virtual bool Equals(object obj)
virtual string ToString()
Type GetType(): returns information about the type of the instance (through a Type class object)

Reflection:
a. Runtime Type Discovery: extracting metadata/information about the assembly, the types of assembly, and members of the types
b. Dynamic Creation of object using metadata of class
c. Dynamic invocation of methods, properties etc.











1 Array	
	- how to create
	- single, multi-dimensional
	- array of arrays (jagged array)
	- params keyword (parameter array)
	- array storing value type values
	- array storing reference type references

2. inheritance
	- what is?
	- types: single, multi-level
	- sealed keyword
	- what can and can't be inherited
	
3. access specifiers:
	class
	class members

4. const keyword

//single dimensional array
//1. type of elements: value type (int)

//Array arr = new Array(int,3);
<data-type>[] arr = new <data-type>[3];
int[] arr = new int[3];
arr[0] = 10;
arr[1] = 20;
arr[2] = 30;

for(int index=0; index<arr.Length; index++)
{
	CW(arr[index]);
}

//2. type of elements: reference type (class objects, strings etc.)

string[] places = new string[3];
places[0] = "Bangalore";
places[1] = "Chennai";
places[2] = "Pune";

Trainee[] trainees = new Trainee[3];
trainees[0] = new Trainee(....);
trainees[1] = new Trainee(....);
trainees[2] = new Trainee(....);

for(int index=0; index<places.Length; index++)
{
	CW(places[index]);
}
for(int index=0; index<trainees.Length; index++)
{
	Trainee traineeRef = trainees[index];
	CW(traineeRef.TraineeName);
}
//Two dimensional
int[,] arr = new int[2,3];
arr[0,0]=10;
arr[0,1]=20;
arr[0,2]=30;

arr[1,0]=40;
arr[1,1]=50;
arr[1,2]=60;

int[,,] arr = new int[2,3,4];
Dimension No.	Dimension Name		Return value of GetLength (arr.GetLength(<dim_no>)
------------------------------------------------------------------------------------------
0		Row			2
1		Column			3
2		Depth			4

arr.Rank --> number of dimensions in the array (2)

//arr.GetLength(<dimension_no>); --> returns you the length of that dimension
arr.GetLength(0); --> returns number of rows
arr.GetLength(1); --> returns number of columns per row
arr.GetLength(2); --> returns number of depths per column


for(int rowIndex=0; rowIndex<2; rowIndex++)
{
	for(int columnIndex=0; columnIndex<3; columnIndex++)
	{
		CW(arr[rowIndex,columnIndex]);
	}
}
//Or
for(int rowIndex=0; rowIndex<arr.GetLength(0); rowIndex++)
{
	for(int columnIndex=0; columnIndex<arr.GetLength(1); columnIndex++)
	{
		CW(arr[rowIndex,columnIndex]);
	}
}

	Array.Copy()
	arr.CopyTo()

(<data-type-of-other arrays> <dim_of_your_array_of_arrays> <dim_of_other_arrays> = new ...;
int[][] jagged = new int[3][];

int[] arr1 = new int[]{10,20};
int[] arr2 = new int[]{30,40,50};
int[] arr3 = new int[]{60,70,80,90};

jagged[0] = arr1;
jagged[1] = arr2;
jagged[2] = arr3;

for(int jaggedIndex=0;jaggedIndex<jagged.Length;jaggedIndex++)
{
	//int[] a = jagged[jaggedIndex];
	/*
	for(int index=0;index<a.Length;index++)
	{
		cw(a[index]);
	}
	*/
	for(int index=0;index<jagged[jaggedIndex].Length;index++)
	{
		cw(jagged[jaggedIndex][index]);
	}
}

Note:
	All the arrays whose references are stored in the Jagged Array, should be similar type, i.e., 		-	containing similar type elements
	-	of similar dimension


jagged[0] = new int[]{10,20};
jagged[1] = new int[,]{{10,20,30}, {40,50,60}}; <-- ERROR
jagged[2] = new string[]{"bangalore"}; <-- ERROR

'params' keyword rules:
1. you can't declare any array with 'params' keyword, ONLY the array as part of the function argument list

Main()
{
	params int[] arr = new int[]{1,2,3};<--ERROR
}

class Sample
{
	int a;
	params int[] arr;<--ERROR
}

SplitSentence(string input, params char[] splitters) <--Correct

2. The parameter array should be the LAST in the argument list
SplitSentence(params char[] splitters, string input) <--ERROR
SplitSentence(string input, params char[] splitters) <--Correct

3. there can be ONLY ONE parameter array in a function's argument list
SplitSentence(string input, params char[] splitters, params char[] otherSplitters)<--ERROR
SplitSentence(string input, params char[] allSplitters) <--Correct

class access specifiers: 
	- public: class can be acessed from other classes within the same application/assembly as well as from other applications
	- internal(default): class can be acessed from other classes within the same application/ assembly

class members access specifiers: 
	- public: members can be accessed from outside the class code as well as within the class code, also available within in child class code
	- private(default): members can be accessed from within the same class code ONLY
	- protected: members can be accessed from within the same class code as well as within the inherited class code, BUT NOT from outside the both class code
	- internal:  members can be accessed from outside the class code as well as within the class code, also available within in child class code, BUT in the SAME application. Just like public member BUT within the same application. it becomes private w.r.t. other applications
	 - protected internal/internal protected: members can be accessed from outside the class code as well as within the class code, also available within in child class code, BUT in the SAME application. Just like public member BUT within the same application. it becomes protected w.r.t. other applications. in other application it will be available as inherited member within th child class code

SampleLibrary.dll 
public class A
{
	internal int x; //public and private
	protected internal int y; //public and protected
}
class B:A
{
	public B(){ this.x = 10; this.y = 20;}	
}
class C
{
	public void Foo()
	{
		A obj = new A();
		obj.x = 10; //OKay
		obj.y = 20;
	}
}

SampleExec.exe (reference to SampleLibrary.dll)
class Test:A
{
	public Test(){ this.y = 10; //Okay this.x = 20; //sorry}
}
class Program
{
	Main()
	{
		A obj = new A();
		obj.x = 10; //Error
		obj.y = 20; //Error

		Test test = new Test();
		test.y = 30; //Error
	}
}

sealed: 
	- this keyword is used with class: stops any class from further derivation 
	- this keyword can be used with properties and methods (conditions apply): ???
	- this keyword is not used with data members and local variables

readonly:
	- this keyword is not used with methods, properties(*) and local variables
	- this keyword is used with data members

base class		child class
-----------------------------------------
public			internal
public			public
internal		internal
internal		public <---- ERROR

const:
	- this keyword can be used with both class's data members and also local variables of methods
	- when any data member or local variable to a function is declared with const keyword it's value can be never be changed during runtime and also the value to a const data member or local variable must be assigned immediately

class A
{
	const int x = 10;

	public void Foo()
	{		
		int a;
		const int z;<--ERROR
		const int z = 20;
	}
}





